var N = null;var searchIndex = {};
searchIndex["lzma_sys"]={"doc":"","items":[[3,"lzma_allocator","lzma_sys","",N,N],[12,"alloc","","",0,N],[12,"free","","",0,N],[12,"opaque","","",0,N],[3,"lzma_stream","","",N,N],[12,"next_in","","",1,N],[12,"avail_in","","",1,N],[12,"total_in","","",1,N],[12,"next_out","","",1,N],[12,"avail_out","","",1,N],[12,"total_out","","",1,N],[12,"allocator","","",1,N],[3,"lzma_filter","","",N,N],[12,"id","","",2,N],[12,"options","","",2,N],[3,"lzma_mt","","",N,N],[12,"flags","","",3,N],[12,"threads","","",3,N],[12,"block_size","","",3,N],[12,"timeout","","",3,N],[12,"preset","","",3,N],[12,"filters","","",3,N],[12,"check","","",3,N],[3,"lzma_options_lzma","","",N,N],[12,"dict_size","","",4,N],[12,"preset_dict","","",4,N],[12,"preset_dict_size","","",4,N],[12,"lc","","",4,N],[12,"lp","","",4,N],[12,"pb","","",4,N],[12,"mode","","",4,N],[12,"nice_len","","",4,N],[12,"mf","","",4,N],[12,"depth","","",4,N],[3,"lzma_stream_flags","","",N,N],[12,"version","","",5,N],[12,"backward_size","","",5,N],[12,"check","","",5,N],[3,"lzma_options_bcj","","",N,N],[12,"start_offset","","",6,N],[4,"lzma_internal","","",N,N],[5,"lzma_code","","",N,N],[5,"lzma_end","","",N,N],[5,"lzma_get_progress","","",N,N],[5,"lzma_memusage","","",N,N],[5,"lzma_memlimit_get","","",N,N],[5,"lzma_memlimit_set","","",N,N],[5,"lzma_easy_encoder_memusage","","",N,N],[5,"lzma_easy_decoder_memusage","","",N,N],[5,"lzma_easy_encoder","","",N,N],[5,"lzma_easy_buffer_encode","","",N,N],[5,"lzma_stream_encoder","","",N,N],[5,"lzma_stream_encoder_mt_memusage","","",N,N],[5,"lzma_stream_encoder_mt","","",N,N],[5,"lzma_alone_encoder","","",N,N],[5,"lzma_stream_buffer_bound","","",N,N],[5,"lzma_stream_buffer_encode","","",N,N],[5,"lzma_stream_decoder","","",N,N],[5,"lzma_auto_decoder","","",N,N],[5,"lzma_alone_decoder","","",N,N],[5,"lzma_stream_buffer_decode","","",N,N],[5,"lzma_check_is_supported","","",N,N],[5,"lzma_check_size","","",N,N],[5,"lzma_crc32","","",N,N],[5,"lzma_crc64","","",N,N],[5,"lzma_get_check","","",N,N],[5,"lzma_filter_encoder_is_supported","","",N,N],[5,"lzma_filter_decoder_is_supported","","",N,N],[5,"lzma_filters_copy","","",N,N],[5,"lzma_raw_encoder_memusage","","",N,N],[5,"lzma_raw_decoder_memusage","","",N,N],[5,"lzma_raw_encoder","","",N,N],[5,"lzma_raw_decoder","","",N,N],[5,"lzma_filters_update","","",N,N],[5,"lzma_raw_buffer_encode","","",N,N],[5,"lzma_raw_buffer_decode","","",N,N],[5,"lzma_properties_size","","",N,N],[5,"lzma_properties_encode","","",N,N],[5,"lzma_properties_decode","","",N,N],[5,"lzma_physmem","","",N,N],[5,"lzma_cputhreads","","",N,N],[5,"lzma_stream_header_encode","","",N,N],[5,"lzma_stream_footer_encode","","",N,N],[5,"lzma_stream_header_decode","","",N,N],[5,"lzma_stream_footer_decode","","",N,N],[5,"lzma_stream_flags_compare","","",N,N],[5,"lzma_version_number","","",N,N],[5,"lzma_version_string","","",N,N],[5,"lzma_vli_encode","","",N,N],[5,"lzma_vli_decode","","",N,N],[5,"lzma_vli_size","","",N,N],[5,"lzma_lzma_preset","","",N,N],[5,"lzma_mf_is_supported","","",N,N],[6,"lzma_bool","","",N,N],[6,"lzma_ret","","",N,N],[6,"lzma_action","","",N,N],[6,"lzma_check","","",N,N],[6,"lzma_vli","","",N,N],[6,"lzma_mode","","",N,N],[6,"lzma_match_finder","","",N,N],[17,"LZMA_OK","","",N,N],[17,"LZMA_STREAM_END","","",N,N],[17,"LZMA_NO_CHECK","","",N,N],[17,"LZMA_UNSUPPORTED_CHECK","","",N,N],[17,"LZMA_GET_CHECK","","",N,N],[17,"LZMA_MEM_ERROR","","",N,N],[17,"LZMA_MEMLIMIT_ERROR","","",N,N],[17,"LZMA_FORMAT_ERROR","","",N,N],[17,"LZMA_OPTIONS_ERROR","","",N,N],[17,"LZMA_DATA_ERROR","","",N,N],[17,"LZMA_BUF_ERROR","","",N,N],[17,"LZMA_PROG_ERROR","","",N,N],[17,"LZMA_RUN","","",N,N],[17,"LZMA_SYNC_FLUSH","","",N,N],[17,"LZMA_FULL_FLUSH","","",N,N],[17,"LZMA_FULL_BARRIER","","",N,N],[17,"LZMA_FINISH","","",N,N],[17,"LZMA_CHECK_NONE","","",N,N],[17,"LZMA_CHECK_CRC32","","",N,N],[17,"LZMA_CHECK_CRC64","","",N,N],[17,"LZMA_CHECK_SHA256","","",N,N],[17,"LZMA_MODE_FAST","","",N,N],[17,"LZMA_MODE_NORMAL","","",N,N],[17,"LZMA_MF_HC3","","",N,N],[17,"LZMA_MF_HC4","","",N,N],[17,"LZMA_MF_BT2","","",N,N],[17,"LZMA_MF_BT3","","",N,N],[17,"LZMA_MF_BT4","","",N,N],[17,"LZMA_TELL_NO_CHECK","","",N,N],[17,"LZMA_TELL_UNSUPPORTED_CHECK","","",N,N],[17,"LZMA_TELL_ANY_CHECK","","",N,N],[17,"LZMA_IGNORE_CHECK","","",N,N],[17,"LZMA_CONCATENATED","","",N,N],[17,"LZMA_PRESET_DEFAULT","","",N,N],[17,"LZMA_PRESET_LEVEL_MASK","","",N,N],[17,"LZMA_PRESET_EXTREME","","",N,N],[17,"LZMA_DICT_SIZE_MIN","","",N,N],[17,"LZMA_DICT_SIZE_DEFAULT","","",N,N],[17,"LZMA_LCLP_MIN","","",N,N],[17,"LZMA_LCLP_MAX","","",N,N],[17,"LZMA_LC_DEFAULT","","",N,N],[17,"LZMA_LP_DEFAULT","","",N,N],[17,"LZMA_PB_MIN","","",N,N],[17,"LZMA_PB_MAX","","",N,N],[17,"LZMA_PB_DEFAULT","","",N,N],[17,"LZMA_BACKWARD_SIZE_MIN","","",N,N],[17,"LZMA_BACKWARD_SIZE_MAX","","",N,N],[17,"LZMA_VLI_MAX","","",N,N],[17,"LZMA_VLI_UNKNOWN","","",N,N],[17,"LZMA_VLI_BYTES_MAX","","",N,N],[17,"LZMA_FILTER_X86","","",N,N],[17,"LZMA_FILTER_POWERPC","","",N,N],[17,"LZMA_FILTER_IA64","","",N,N],[17,"LZMA_FILTER_ARM","","",N,N],[17,"LZMA_FILTER_ARMTHUMB","","",N,N],[17,"LZMA_FILTER_SPARC","","",N,N],[17,"LZMA_FILTER_LZMA1","","",N,N],[17,"LZMA_FILTER_LZMA2","","",N,N],[11,"clone","","",4,[[["self"]],["lzma_options_lzma"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]]],"paths":[[3,"lzma_allocator"],[3,"lzma_stream"],[3,"lzma_filter"],[3,"lzma_mt"],[3,"lzma_options_lzma"],[3,"lzma_stream_flags"],[3,"lzma_options_bcj"],[4,"lzma_internal"]]};
searchIndex["xz2"]={"doc":"LZMA/XZ encoding and decoding streams","items":[[0,"stream","xz2","Raw in-memory LZMA streams.",N,N],[3,"Stream","xz2::stream","Representation of an in-memory LZMA encoding or decoding stream.",N,N],[3,"LzmaOptions","","Options that can be used to configure how LZMA encoding happens.",N,N],[3,"MtStreamBuilder","","Builder to create a multi-threaded stream encoder.",N,N],[3,"Filters","","A custom chain of filters to configure an encoding stream.",N,N],[4,"Action","","The `action` argument for `process`,",N,N],[13,"Run","","Continue processing",0,N],[13,"SyncFlush","","Make all the input available at output",0,N],[13,"FullFlush","","Finish encoding of the current block.",0,N],[13,"FullBarrier","","Finish encoding of the current block.",0,N],[13,"Finish","","Finish the current operation",0,N],[4,"Status","","Return value of a `process` operation.",N,N],[13,"Ok","","Operation completed successfully.",1,N],[13,"StreamEnd","","End of stream was reached.",1,N],[13,"GetCheck","","If the TELL_ANY_CHECK flags is specified when constructing a decoder, this informs that the `check` method will now return the underlying integrity check algorithm.",1,N],[13,"MemNeeded","","An error has not been encountered, but no progress is possible.",1,N],[4,"Error","","Possible error codes that can be returned from a processing operation.",N,N],[13,"Data","","The underlying data was corrupt.",2,N],[13,"Options","","Invalid or unsupported options were specified.",2,N],[13,"Format","","File format wasn't recognized.",2,N],[13,"MemLimit","","Memory usage limit was reached.",2,N],[13,"Mem","","Memory couldn't be allocated.",2,N],[13,"Program","","A programming error was encountered.",2,N],[13,"NoCheck","","The `TELL_NO_CHECK` flag was specified and no integrity check was available for this stream.",2,N],[13,"UnsupportedCheck","","The `TELL_UNSUPPORTED_CHECK` flag was specified and no integrity check isn't implemented in this build of liblzma for this stream.",2,N],[4,"Check","","Possible integrity checks that can be part of a .xz stream.",N,N],[13,"None","","",3,N],[13,"Crc32","","",3,N],[13,"Crc64","","",3,N],[13,"Sha256","","",3,N],[4,"Mode","","Compression modes",N,N],[13,"Fast","","Fast compression.",4,N],[13,"Normal","","Normal compression.",4,N],[4,"MatchFinder","","Match finders",N,N],[13,"HashChain3","","Hash Chain with 2- and 3-byte hashing",5,N],[13,"HashChain4","","Hash Chain with 2-, 3-, and 4-byte hashing",5,N],[13,"BinaryTree2","","Binary Tree with 2-byte hashing",5,N],[13,"BinaryTree3","","Binary Tree with 2- and 3-byte hashing",5,N],[13,"BinaryTree4","","Binary Tree with 2-, 3-, and 4-byte hashing",5,N],[17,"TELL_ANY_CHECK","","A flag passed when initializing a decoder, causes `process` to return `Status::GetCheck` as soon as the integrity check is known.",N,N],[17,"TELL_NO_CHECK","","A flag passed when initializing a decoder, causes `process` to return `Error::NoCheck` if the stream being decoded has no integrity check.",N,N],[17,"TELL_UNSUPPORTED_CHECK","","A flag passed when initializing a decoder, causes `process` to return `Error::UnsupportedCheck` if the stream being decoded has an integrity check that cannot be verified by this build of liblzma.",N,N],[17,"IGNORE_CHECK","","A flag passed when initializing a decoder, causes the decoder to ignore any integrity checks listed.",N,N],[17,"CONCATENATED","","A flag passed when initializing a decoder, indicates that the stream may be multiple concatenated xz files.",N,N],[11,"clone","","",0,[[["self"]],["action"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",1,[[["self"]],["status"]]],[11,"eq","","",1,[[["self"],["status"]],["bool"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["error"]]],[11,"eq","","",2,[[["self"],["error"]],["bool"]]],[11,"clone","","",3,[[["self"]],["check"]]],[11,"clone","","",4,[[["self"]],["mode"]]],[11,"clone","","",5,[[["self"]],["matchfinder"]]],[11,"new_easy_encoder","","Initialize .xz stream encoder using a preset number",6,[[["u32"],["check"]],["result",["stream","error"]]]],[11,"new_lzma_encoder","","Initialize .lzma encoder (legacy file format)",6,[[["lzmaoptions"]],["result",["stream","error"]]]],[11,"new_stream_encoder","","Initialize .xz Stream encoder using a custom filter chain",6,[[["filters"],["check"]],["result",["stream","error"]]]],[11,"new_stream_decoder","","Initialize a .xz stream decoder.",6,[[["u64"],["u32"]],["result",["stream","error"]]]],[11,"new_lzma_decoder","","Initialize a .lzma stream decoder.",6,[[["u64"]],["result",["stream","error"]]]],[11,"new_auto_decoder","","Initialize a decoder which will choose a stream/lzma formats depending on the input stream.",6,[[["u64"],["u32"]],["result",["stream","error"]]]],[11,"process","","Processes some data from input into an output buffer.",6,N],[11,"process_vec","","Performs the same data as `process`, but places output data in a `Vec`.",6,N],[11,"total_in","","Returns the total amount of input bytes consumed by this stream.",6,[[["self"]],["u64"]]],[11,"total_out","","Returns the total amount of bytes produced by this stream.",6,[[["self"]],["u64"]]],[11,"memlimit","","Get the current memory usage limit.",6,[[["self"]],["u64"]]],[11,"set_memlimit","","Set the current memory usage limit.",6,[[["self"],["u64"]],["result",["error"]]]],[11,"new_preset","","Creates a new blank set of options for encoding.",7,[[["u32"]],["result",["lzmaoptions","error"]]]],[11,"dict_size","","Configures the dictionary size, in bytes",7,[[["self"],["u32"]],["lzmaoptions"]]],[11,"literal_context_bits","","Configures the number of literal context bits.",7,[[["self"],["u32"]],["lzmaoptions"]]],[11,"literal_position_bits","","Configures the number of literal position bits.",7,[[["self"],["u32"]],["lzmaoptions"]]],[11,"position_bits","","Configures the number of position bits.",7,[[["self"],["u32"]],["lzmaoptions"]]],[11,"mode","","Configures the compression mode.",7,[[["self"],["mode"]],["lzmaoptions"]]],[11,"nice_len","","Configures the nice length of a match.",7,[[["self"],["u32"]],["lzmaoptions"]]],[11,"match_finder","","Configures the match finder ID.",7,[[["self"],["matchfinder"]],["lzmaoptions"]]],[11,"depth","","Maximum search depth in the match finder.",7,[[["self"],["u32"]],["lzmaoptions"]]],[11,"is_supported","","Test if this check is supported in this build of liblzma.",3,[[["self"]],["bool"]]],[11,"is_supported","","Test if this match finder is supported in this build of liblzma.",5,[[["self"]],["bool"]]],[11,"new","","Creates a new filter chain with no filters.",8,[[],["filters"]]],[11,"lzma1","","Add an LZMA1 filter.",8,[[["self"],["lzmaoptions"]],["filters"]]],[11,"lzma2","","Add an LZMA2 filter.",8,[[["self"],["lzmaoptions"]],["filters"]]],[11,"x86","","Add a filter for x86 binaries.",8,[[["self"]],["filters"]]],[11,"powerpc","","Add a filter for PowerPC binaries.",8,[[["self"]],["filters"]]],[11,"ia64","","Add a filter for IA-64 (itanium) binaries.",8,[[["self"]],["filters"]]],[11,"arm","","Add a filter for ARM binaries.",8,[[["self"]],["filters"]]],[11,"arm_thumb","","Add a filter for ARM-Thumb binaries.",8,[[["self"]],["filters"]]],[11,"sparc","","Add a filter for SPARC binaries.",8,[[["self"]],["filters"]]],[11,"new","","Creates a new blank builder to create a multithreaded encoding `Stream`.",9,[[],["mtstreambuilder"]]],[11,"threads","","Configures the number of worker threads to use",9,[[["self"],["u32"]],["self"]]],[11,"block_size","","Configures the maximum uncompressed size of a block",9,[[["self"],["u64"]],["self"]]],[11,"timeout_ms","","Timeout to allow `process` to return early",9,[[["self"],["u32"]],["self"]]],[11,"preset","","Compression preset (level and possible flags)",9,[[["self"],["u32"]],["self"]]],[11,"filters","","Configure a custom filter chain",9,[[["self"],["filters"]],["self"]]],[11,"check","","Configures the integrity check type",9,[[["self"],["check"]],["self"]]],[11,"memusage","","Calculate approximate memory usage of multithreaded .xz encoder",9,[[["self"]],["u64"]]],[11,"encoder","","Initialize multithreaded .xz stream encoder.",9,[[["self"]],["result",["stream","error"]]]],[11,"description","","",2,[[["self"]],["str"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"drop","","",6,[[["self"]]]],[0,"bufread","xz2","I/O streams for wrapping `BufRead` types as encoders/decoders",N,N],[3,"XzEncoder","xz2::bufread","An xz encoder, or compressor.",N,N],[3,"XzDecoder","","A xz decoder, or decompressor.",N,N],[11,"new","","Creates a new encoder which will read uncompressed data from the given stream and emit the compressed stream.",10,[[["r"],["u32"]],["xzencoder"]]],[11,"new_stream","","Creates a new encoder with a custom `Stream`.",10,[[["r"],["stream"]],["xzencoder"]]],[11,"get_ref","","Acquires a reference to the underlying stream",10,[[["self"]],["r"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream",10,[[["self"]],["r"]]],[11,"into_inner","","Consumes this encoder, returning the underlying reader.",10,[[["self"]],["r"]]],[11,"total_out","","Returns the number of bytes produced by the compressor (e.g. the number of bytes read from this stream)",10,[[["self"]],["u64"]]],[11,"total_in","","Returns the number of bytes consumed by the compressor (e.g. the number of bytes read from the underlying stream)",10,[[["self"]],["u64"]]],[11,"read","","",10,N],[11,"write","","",10,N],[11,"flush","","",10,[[["self"]],["result"]]],[11,"new","","Creates a new decoder which will decompress data read from the given stream.",11,[[["r"]],["xzdecoder"]]],[11,"new_multi_decoder","","Creates a new decoder which will decompress data read from the given input. All the concatenated xz streams from input will be consumed.",11,[[["r"]],["xzdecoder"]]],[11,"new_stream","","Creates a new decoder with a custom `Stream`.",11,[[["r"],["stream"]],["xzdecoder"]]],[11,"get_ref","","Acquires a reference to the underlying stream",11,[[["self"]],["r"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream",11,[[["self"]],["r"]]],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",11,[[["self"]],["r"]]],[11,"total_in","","Returns the number of bytes that the decompressor has consumed.",11,[[["self"]],["u64"]]],[11,"total_out","","Returns the number of bytes that the decompressor has produced.",11,[[["self"]],["u64"]]],[11,"read","","",11,N],[11,"write","","",11,N],[11,"flush","","",11,[[["self"]],["result"]]],[0,"read","xz2","Reader-based compression/decompression streams",N,N],[3,"XzEncoder","xz2::read","A compression stream which wraps an uncompressed stream of data. Compressed data will be read from the stream.",N,N],[3,"XzDecoder","","A decompression stream which wraps a compressed stream of data. Decompressed data will be read from the stream.",N,N],[11,"new","","Create a new compression stream which will compress at the given level to read compress output to the give output stream.",12,[[["r"],["u32"]],["xzencoder"]]],[11,"new_stream","","Creates a new encoder with a custom `Stream`.",12,[[["r"],["stream"]],["xzencoder"]]],[11,"get_ref","","Acquires a reference to the underlying stream",12,[[["self"]],["r"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream",12,[[["self"]],["r"]]],[11,"into_inner","","Unwrap the underlying writer, finishing the compression stream.",12,[[["self"]],["r"]]],[11,"total_out","","Returns the number of bytes produced by the compressor (e.g. the number of bytes read from this stream)",12,[[["self"]],["u64"]]],[11,"total_in","","Returns the number of bytes consumed by the compressor (e.g. the number of bytes read from the underlying stream)",12,[[["self"]],["u64"]]],[11,"read","","",12,N],[11,"write","","",12,N],[11,"flush","","",12,[[["self"]],["result"]]],[11,"new","","Create a new decompression stream, which will read compressed data from the given input stream, and decompress one xz stream. It may also consume input data that follows the xz stream. Use [`xz::bufread::XzDecoder`] instead to process a mix of xz and non-xz data.",13,[[["r"]],["xzdecoder"]]],[11,"new_multi_decoder","","Create a new decompression stream, which will read compressed data from the given input and decompress all the xz stream it contains.",13,[[["r"]],["xzdecoder"]]],[11,"new_stream","","Creates a new decoder with a custom `Stream`.",13,[[["r"],["stream"]],["xzdecoder"]]],[11,"get_ref","","Acquires a reference to the underlying stream",13,[[["self"]],["r"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream",13,[[["self"]],["r"]]],[11,"into_inner","","Unwrap the underlying writer, finishing the compression stream.",13,[[["self"]],["r"]]],[11,"total_out","","Returns the number of bytes produced by the decompressor (e.g. the number of bytes read from this stream)",13,[[["self"]],["u64"]]],[11,"total_in","","Returns the number of bytes consumed by the decompressor (e.g. the number of bytes read from the underlying stream)",13,[[["self"]],["u64"]]],[11,"read","","",13,N],[11,"write","","",13,N],[11,"flush","","",13,[[["self"]],["result"]]],[0,"write","xz2","Writer-based compression/decompression streams",N,N],[3,"XzEncoder","xz2::write","A compression stream which will have uncompressed data written to it and will write compressed data to an output stream.",N,N],[3,"XzDecoder","","A compression stream which will have compressed data written to it and will write uncompressed data to an output stream.",N,N],[11,"new","","Create a new compression stream which will compress at the given level to write compress output to the give output stream.",14,[[["w"],["u32"]],["xzencoder"]]],[11,"new_stream","","Create a new encoder which will use the specified `Stream` to encode (compress) data into the provided `obj`.",14,[[["w"],["stream"]],["xzencoder"]]],[11,"get_ref","","Acquires a reference to the underlying writer.",14,[[["self"]],["w"]]],[11,"get_mut","","Acquires a mutable reference to the underlying writer.",14,[[["self"]],["w"]]],[11,"try_finish","","Attempt to finish this output stream, writing out final chunks of data.",14,[[["self"]],["result"]]],[11,"finish","","Consumes this encoder, flushing the output stream.",14,[[["self"]],["result"]]],[11,"total_out","","Returns the number of bytes produced by the compressor",14,[[["self"]],["u64"]]],[11,"total_in","","Returns the number of bytes consumed by the compressor (e.g. the number of bytes written to this stream.)",14,[[["self"]],["u64"]]],[11,"write","","",14,N],[11,"flush","","",14,[[["self"]],["result"]]],[11,"read","","",14,N],[11,"drop","","",14,[[["self"]]]],[11,"new","","Creates a new decoding stream which will decode into `obj` one xz stream from the input written to it.",15,[[["w"]],["xzdecoder"]]],[11,"new_multi_decoder","","Creates a new decoding stream which will decode into `obj` all the xz streams from the input written to it.",15,[[["w"]],["xzdecoder"]]],[11,"new_stream","","Creates a new decoding stream which will decode all input written to it into `obj`.",15,[[["w"],["stream"]],["xzdecoder"]]],[11,"get_ref","","Acquires a reference to the underlying writer.",15,[[["self"]],["w"]]],[11,"get_mut","","Acquires a mutable reference to the underlying writer.",15,[[["self"]],["w"]]],[11,"finish","","Unwrap the underlying writer, finishing the compression stream.",15,[[["self"]],["result"]]],[11,"total_out","","Returns the number of bytes produced by the decompressor",15,[[["self"]],["u64"]]],[11,"total_in","","Returns the number of bytes consumed by the decompressor (e.g. the number of bytes written to this stream.)",15,[[["self"]],["u64"]]],[11,"write","","",15,N],[11,"flush","","",15,[[["self"]],["result"]]],[11,"read","","",15,N],[11,"drop","","",15,[[["self"]]]],[11,"into","xz2::stream","",6,[[["self"]],["u"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"into","xz2::bufread","",10,[[["self"]],["u"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"into","xz2::read","",12,[[["self"]],["u"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"into","xz2::write","",14,[[["self"]],["u"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]]],"paths":[[4,"Action"],[4,"Status"],[4,"Error"],[4,"Check"],[4,"Mode"],[4,"MatchFinder"],[3,"Stream"],[3,"LzmaOptions"],[3,"Filters"],[3,"MtStreamBuilder"],[3,"XzEncoder"],[3,"XzDecoder"],[3,"XzEncoder"],[3,"XzDecoder"],[3,"XzEncoder"],[3,"XzDecoder"]]};
initSearch(searchIndex);
